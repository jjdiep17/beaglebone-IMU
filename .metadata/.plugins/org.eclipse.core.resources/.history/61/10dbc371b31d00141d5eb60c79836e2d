/*
* The code is released under the GNU General Public License.
* Developed by Mark Williams
* A guide to this code can be found here; http://marks-space.com/2013/04/22/845/
* Created 28th April 2013
*/

//works! Justin Diep

#include <unistd.h>
#include <math.h>
#include <signal.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>
#include <time.h>
#include "L3G.h"
#include "LSM303.h"
#include "i2c-dev.h"

int file;

#define X   0
#define Y   1
#define Z   2

#define DT 0.02         // [s/loop] loop period. 20ms
#define AA 0.98         // complementary filter constant

#define A_GAIN 0.0573      // [deg/LSB]
#define G_GAIN 0.070     // [deg/s/LSB]
#define RAD_TO_DEG 57.29578
#define M_PI 3.14159265358979323846




void  INThandler(int sig)
{
        signal(sig, SIG_IGN);
        exit(0);
}

int mymillis()
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return (tv.tv_sec) * 1000000 + (tv.tv_usec);
}

int timeval_subtract(struct timeval *result, struct timeval *t2, struct timeval *t1)
{
    long int diff = (t2->tv_usec + 1000000 * t2->tv_sec) - (t1->tv_usec + 1000000 * t1->tv_sec);
    result->tv_sec = diff / 1000000;
    result->tv_usec = diff % 1000000;
    return (diff<0);
}

// originally sensor.c

void  readBlock(uint8_t command, uint8_t size, uint8_t *data)
{
    int result = i2c_smbus_read_i2c_block_data(file, command, size, data);
    if (result != size)
    {
        printf("Failed to read block from I2C.");
        exit(1);
    }
}

void selectDevice(int file, int addr)
{
        char device[3];
        if (addr == 1)
                device == "L3G";
        else
                device == "LSM";


        if (ioctl(file, I2C_SLAVE, addr) < 0) {
                fprintf(stderr,
                      "Error: Could not select device  0x%02x: %s\n",
                        device, strerror(errno));
        }
}


void readACC(int  *a)
{
 	uint8_t block[6];
        selectDevice(file,ACC_ADDRESS);
		readBlock(0x80 | LSM303_OUT_X_L_A, sizeof(block), block);

        *a = (int16_t)(block[0] | block[1] << 8) >> 4;
        *(a+1) = (int16_t)(block[2] | block[3] << 8) >> 4;
        *(a+2) = (int16_t)(block[4] | block[5] << 8) >> 4;
}

void readMAG(int  *m)
{
	uint8_t block[6];
        selectDevice(file,MAG_ADDRESS);
	// DLHC: register address order is X,Z,Y with high bytes first
	readBlock(0x80 | LSM303_OUT_X_H_M, sizeof(block), block);

       	*m = (int16_t)(block[1] | block[0] << 8);
        *(m+1) = (int16_t)(block[5] | block[4] << 8) ;
        *(m+2) = (int16_t)(block[3] | block[2] << 8) ;
}
void readGYR(int *g)
{
	uint8_t block[6];

        selectDevice(file,GYR_ADDRESS);

	readBlock(0x80 | L3G_OUT_X_L, sizeof(block), block);

        *g = (int16_t)(block[1] << 8 | block[0]);
        *(g+1) = (int16_t)(block[3] << 8 | block[2]);
        *(g+2) = (int16_t)(block[5] << 8 | block[4]);

}


void writeAccReg(uint8_t reg, uint8_t value)
{
    selectDevice(file,ACC_ADDRESS);
  int result = i2c_smbus_write_byte_data(file, reg, value);
    if (result == -1)
    {
        printf ("Failed to write byte to I2C Acc.");
        exit(1);
    }
}

void writeMagReg(uint8_t reg, uint8_t value)
{
    selectDevice(file,MAG_ADDRESS);
  int result = i2c_smbus_write_byte_data(file, reg, value);
    if (result == -1)
    {
        printf("Failed to write byte to I2C Mag.");
        exit(1);
    }
}


void writeGyrReg(uint8_t reg, uint8_t value)
{
    selectDevice(file,GYR_ADDRESS);
  int result = i2c_smbus_write_byte_data(file, reg, value);
    if (result == -1)
    {
        printf("Failed to write byte to I2C Gyr.");
        exit(1);
    }
}


void enableIMU()
{

	__u16 block[I2C_SMBUS_BLOCK_MAX];

        int res, bus,  size;


        char filename[20];
        sprintf(filename, "/dev/i2c-%d", 1);
        file = open(filename, O_RDWR);
        if (file<0) {
		printf("Unable to open I2C bus!");
                exit(1);
        }

 // Enable accelerometer.
    writeAccReg(LSM303_CTRL_REG1_A, 0b00010111); //  z,y,x axis enabled , 100Hz data rate
//	writeAccReg(LSM303_CTRL_REG1_A, 0b10010111); //  z,y,x axis enabled , 1.344kHz data rate?
	writeAccReg(LSM303_CTRL_REG4_A, 0b00101000); // +/- 8G full scale: FS = 10 on DLHC, high resolution output mode

 // Enable magnetometer
        writeMagReg(LSM303_MR_REG_M, 0x00);  // enable magnometer

 // Enable Gyro
        writeGyrReg(L3G_CTRL_REG1, 0b11011111); // Normal power mode, all axes enabled
//        writeGyrReg(L3G_CTRL_REG1, 0b11111111); // AFAP!?, all axes enabled
        writeGyrReg(L3G_CTRL_REG4, 0b00110000); // Continuous update, 2000 dps full scale

}

//sensor.c end

int main(int argc, char *argv[])
{
	FILE *fp;
	char *mode = "w";
	fp = fopen("logMPU.txt", mode);

	if (fp == NULL) {
		fprintf(stderr, "Can't open output file %s!\n", "logMPU.txt");
		exit(1);
	}

	FILE *tp;
	tp = fopen("logReadMPU.txt", mode);

	if (tp == NULL) {
		fprintf(stderr, "Can't open output file %s!\n", "logReadMPU.txt");
		exit(1);
	}

	float rate_gyr_y = 0.0;   // [deg/s]
	float rate_gyr_x = 0.0;    // [deg/s]
	float rate_gyr_z = 0.0;     // [deg/s]


	int  *Pacc_raw;
	int  *Pmag_raw;
	int  *Pgyr_raw;
	int  acc_raw[3];
	int  mag_raw[3];
	int  gyr_raw[3];

	int loops = 0;
	int loopTime = 0;
	int oldLoop = 0;
	int delta = 0;
	int sensorStart = 0;
	int sensorEnd = 0;
	int sensorDelta = 0;

	Pacc_raw = acc_raw;
	Pmag_raw = mag_raw;
	Pgyr_raw = gyr_raw;


	float gyroXangle = 0.0;
	float gyroYangle = 0.0;
	float gyroZangle = 0.0;
	float AccYangle = 0.0;
	float AccXangle = 0.0;
	float CFangleX = 0.0;
	float CFangleY = 0.0;


	struct  timeval tvBegin, tvEnd,tvDiff;

	signed int acc_y = 0;
	signed int acc_x = 0;
	signed int acc_z = 0;
	signed int gyr_x = 0;
	signed int gyr_y = 0;
	signed int gyr_z = 0;


    signal(SIGINT, INThandler);

	enableIMU();

	int startInt  = mymillis();



	while(loops < 1000)
	{

	sensorStart = mymillis()-startInt;
	fprintf(tp, "Start Read time: %d\t", sensorStart);

	//read ACC and GYR data
	//readMAG(Pmag_raw); //not used!
	readACC(Pacc_raw);
	//readGYR(Pgyr_raw);

	sensorEnd = mymillis()-startInt;
	sensorDelta = sensorEnd - sensorStart;
	fprintf(tp, "End Read time: %d\t delta %d\n", sensorEnd, sensorDelta);

	//Convert Gyro raw to degrees per second
	//rate_gyr_x = (float) *gyr_raw * G_GAIN;
	//rate_gyr_y = (float) *(gyr_raw+1) * G_GAIN;
	//rate_gyr_z = (float) *(gyr_raw+2) * G_GAIN;



	//Calculate the angles from the gyro
	//gyroXangle+=rate_gyr_x*DT;
	//gyroYangle+=rate_gyr_y*DT;
	//gyroZangle+=rate_gyr_z*DT;




	//Convert Accelerometer values to degrees
	AccXangle = (float) (atan2(*(acc_raw+1),*(acc_raw+2))+M_PI)*RAD_TO_DEG;
	AccYangle = (float) (atan2(*(acc_raw+2),*acc_raw)+M_PI)*RAD_TO_DEG;


	//Change the rotation value of the accelerometer to -/+ 180
	if (AccXangle >180)
	{
		AccXangle -= (float)360.0;
	}
	if (AccYangle >180)
		AccYangle -= (float)360.0;

//      Complementary filter used to combine the accelerometer and gyr#include "sensor.c"o values.
	CFangleX=AA*(CFangleX+rate_gyr_x*DT) +(1 - AA) * AccXangle;
	CFangleY=AA*(CFangleY+rate_gyr_y*DT) +(1 - AA) * AccYangle;

	loopTime = mymillis() - startInt;
	delta = loopTime - oldLoop;
	oldLoop = loopTime;

	fprintf (fp, "  Loop Time %d\t delta %d \t GyroX  %7.3f \t AccXangle %7.3f \t CFangleX %7.3f \t GyroY  %7.3f \t AccYangle %7.3f \t CFangleY %7.3f\t \n",loopTime, delta, gyroXangle,AccXangle,CFangleX,gyroYangle,AccYangle,CFangleY);
	//Each loop should be at least 20ms.
//        while(mymillis() - startInt < 20)
//        {
//            usleep(200);
//        }

	loops++;
    }
	fclose(fp);
	fclose(tp);
	return 0;
}

