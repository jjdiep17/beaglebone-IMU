/*
 * HelloCross.cpp
 *
 *  Created on: Jul 7, 2014
 *      Author: jdiep
 */

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
using namespace std;
#define MAX 64

int flashGPIOLED(int, int);
int readButton(int);

int main() {
	//readButton(117);
	flashGPIOLED(44, 100);
	return 0;
}

int flashGPIOLED(int GPIOPin, int times) {
	cout << "GPIO Input Pin:" << GPIOPin << " start" << endl;
	FILE *LEDHandle = NULL;
	char setValue[4], GPIOString[4], GPIOValue[MAX], GPIODirection[MAX];
	sprintf(GPIOString, "%d", GPIOPin);
	sprintf(GPIOValue, "/sys/class/gpio/gpio%d/value", GPIOPin);
	sprintf(GPIODirection, "/sys/class/gpio/gpio%d/direction", GPIOPin);

	// Export the pin
	if ((LEDHandle = fopen("/sys/class/gpio/export", "ab")) == NULL){
			printf("Cannot export the GPIO pin.\n");
			return 1;
	}
	strcpy(setValue, GPIOString);
	fwrite(&setValue, sizeof(char), 2, LEDHandle);
	fclose(LEDHandle);

	// Set the direction of the pin
	if ((LEDHandle = fopen(GPIODirection, "rb+")) == NULL){
		printf("Cannot open direction handle.\n");
		return 1;
	}
	strcpy(setValue, "out");
	fwrite(&setValue, sizeof(char), 3, LEDHandle);
	fclose(LEDHandle);

	// Flash the LED int times
	for(int i=0; i<(times*2); i++){
		if ((LEDHandle = fopen(GPIOValue, "rb+")) == NULL){
			printf("Cannot open value handle.\n");
			return 1;
		}
		if(i%2==1) {strcpy(setValue,"0"); }
		else {strcpy(setValue, "1"); }
		fwrite(&setValue,sizeof(char), 1, LEDHandle);
		fclose(LEDHandle);
		usleep(1000);		// Sleep for 1 second
	}

	// Unexport the pin
	if ((LEDHandle = fopen("/sys/class/gpio/unexport", "ab")) == NULL){
		printf("Cannot unexport the GPIO pin.\n");
		return 1;
	}
	strcpy(setValue, GPIOString);
	fwrite(&setValue,sizeof(char), 2, LEDHandle);
	fclose(LEDHandle);

	cout << "GPIO LED Flash Pin:" << GPIOPin << " end" << endl;
	return 0;
}

int readButton(int inputPin) {
	cout << "GPIO Input Pin:" << inputPin << " start" << endl;
	FILE *buttonHandle = NULL;
	char setValue[4], GPIOString[4], GPIOValue[MAX], GPIODirection[MAX];
	sprintf(GPIOString, "%d", inputPin);
	sprintf(GPIOValue, "/sys/class/gpio/gpio%d/value", inputPin);
	sprintf(GPIODirection, "/sys/class/gpio/gpio%d/direction", inputPin);

	// Export the pin
	if ((buttonHandle = fopen("/sys/class/gpio/export", "ab")) == NULL){
			printf("Cannot export the GPIO pin.\n");
			return 1;
	}
	strcpy(setValue, GPIOString);
	fwrite(&setValue, sizeof(char), 3, buttonHandle);
	fclose(buttonHandle);

	// Set the direction of the pin
	if ((buttonHandle = fopen(GPIODirection, "rb+")) == NULL){
		printf("Cannot open direction handle.\n");
		return 1;
	}
	strcpy(setValue, "in");
	fwrite(&setValue, sizeof(char), 3, buttonHandle);
	fclose(buttonHandle);

	// Read in the value of the pin
	if ((buttonHandle = fopen(GPIOValue, "rb+")) == NULL){
		printf("Cannot open value handle.\n");
		return 1;
	}
	fread(&setValue, sizeof(char), 1, buttonHandle);
	fclose(buttonHandle);
	cout << "The value that was read in was: " << setValue[0] << endl;

	// Unexport the pin
	if ((buttonHandle = fopen("/sys/class/gpio/unexport", "ab")) == NULL){
		printf("Cannot unexport the GPIO pin.\n");
		return 1;
	}
	strcpy(setValue, GPIOString);
	fwrite(&setValue,sizeof(char), 3, buttonHandle);
	fclose(buttonHandle);
	return 0;
}
