/*
 * quaternion.c
 *
 *  Created on: Aug 11, 2014
 *      Author: jdiep
 */

#include <math.h>

struct Quaternion {
	float w;
	float x;
	float y;
	float z;
	Quaternion* (*getProduct)(Quaternion* q1, Quaternion* q2);
	Quaternion* (*getConjugate)(Quaternion* q);
	float (*getMagnitude)(quaternion* q);
	void (*normalize)(quaternion* q);
	quaternion* (*getNormalized)(quaternion* q);

};

quaternion* getProduct(quaternion* q1, quaternion* q2) {
	float nw = (q1->w * q2->w) - (q1->x * q2->x) - (q1->y * q2->y) - (q1->z * q2->z);
	float nx = (q1->w * q2->x) + (q1->x * q2->w) + (q1->y * q2->z) + (q1->z * q2->y);
	float ny = (q1->w * q2->y) - (q1->x * q2->z) + (q1->y * q2->w) + (q1->z * q2->x);
	float nz = (q1->w * q2->z) + (q1->x * q2->y) - (q1->y * q2->x) + (q1->z * q2->w);
	return construct_with_floats(nw, nx, ny, nz);
}

Quaternion* getConjugate(quaternion* q) {
	return construct_with_floats(q->w, -q->x, -q->y, -q_->z);
}

float getMagnitude(quaternion* q) {
	return sqrt((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
}

void normalize(quaternion* q) {
	 float m = getMagnitude();
      q->w /= m;
      q->x /= m;
      q->y /= m;
      q->z /= m;
}

quaternion* getNormalized(quaternion* q) {
	quaternion* r = construct_with_floats(q->w, q->x, q->y, q_->z);
	r = normalize(r);
	return r;
}

quaternion* construct_default() {
	quaternion* q = malloc(sizeof(quaternion));
	q->w = 1.0; q->x = 0.0; q->y = 0.0; q->z = 0.0;
	q->getProduct = getProduct;
	q->getConjugate = getConjugate;
	q->normalize = normalize;
	q->getNormalized = getNormalized;
	q->getMagnitude = getMagnitude;
	return q;
}

quaternion* construct_with_int_array(int32_t* data) {
	quaternion* q = malloc(sizeof(quaternion));
	q->w = (float) data[0]/16384.0; q->x = (float) data[1]/16384.0;
	q->y = (float) data[2]/16384.0; q->z = (float) data[3]/16384.0;
	q->getProduct = getProduct;
	q->getConjugate = getConjugate;
	q->normalize = normalize;
	q->getNormalized = getNormalized;
	q->getMagnitude = getMagnitude;
	reutrn q;
}

quaternion* construct_with_floats(float nw, float nx, float ny, float nz) {
	quaternion* q = malloc(sizeof(quaternion));
	q->w = nw; q->x = nx; q->y = ny; q->z = nz;
	q->getProduct = getProduct;
	q->getConjugate = getConjugate;
	q->normalize = normalize;
	q->getNormalized = getNormalized;
	q->getMagnitude = getMagnitude;
	return q;
}
